var _0x2710 = ['\x0a\x20\x20\x20\x20//\x20Blur\x20effect\x0a\x20\x20\x20\x20//\x20Edited\x20from\x20https://www.shadertoy.com/view/XdfGDH\x0a\x0a\x20\x20\x20\x20precision\x20highp\x20float;\x0a\x20\x20\x20\x20precision\x20highp\x20int;\x0a\x0a\x20\x20\x20\x20uniform\x20vec2\x20iResolution;\x0a\x20\x20\x20\x20uniform\x20sampler2D\x20tDiffuse;\x0a\x20\x20\x20\x20uniform\x20float\x20iGlobalTime;\x0a\x0a\x20\x20\x20\x20varying\x20vec2\x20vUv;\x0a\x0a\x20\x20\x20\x20float\x20AMPLITUDE\x20=\x200.0;\x0a\x0a\x20\x20\x20\x20float\x20normpdf(\x20in\x20float\x20x,\x20in\x20float\x20sigma)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x200.39894\x20*\x20exp(-0.5\x20*\x20x\x20*\x20x\x20/\x20(sigma\x20*\x20sigma))\x20/\x20sigma;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20void\x20main()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec2\x20uv\x20=\x20vUv;\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec3\x20c\x20=\x20texture2D(tDiffuse,\x20gl_FragCoord.xy\x20/\x20iResolution.xy).rgb;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20grain\x20effect\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20strength\x20=\x2010.0;\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20x\x20=\x20(uv.x\x20+\x204.0)\x20*\x20(uv.y\x20+\x204.0)\x20*\x20(iGlobalTime\x20*\x2010.0);\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec3\x20grain\x20=\x20vec3(mod((mod(x,\x2013.0)\x20+\x201.0)\x20*\x20(mod(x,\x20123.0)\x20+\x201.0),\x200.01)\x20-\x200.005)\x20*\x20strength;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20int\x20mSize\x20=\x205;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20int\x20kSize\x20=\x20(mSize\x20-\x201)\x20/\x202;\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20kernel[mSize];\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec3\x20final_colour\x20=\x20vec3(0.0);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//create\x20the\x201-D\x20kernel\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20sigma\x20=\x207.0;\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20Z\x20=\x200.0;\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(int\x20j\x20=\x200;\x20j\x20<=\x20kSize;\x20++j)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20kernel[kSize\x20+\x20j]\x20=\x20kernel[kSize\x20-\x20j]\x20=\x20normpdf(float(j),\x20sigma);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//get\x20the\x20normalization\x20factor\x20(as\x20the\x20gaussian\x20has\x20been\x20clamped)\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(int\x20j\x20=\x200;\x20j\x20<\x20mSize;\x20++j)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20Z\x20+=\x20kernel[j];\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//read\x20out\x20the\x20texels\x0a\x20\x20\x20\x20\x20\x20\x20\x20for\x20(int\x20i\x20=\x20-kSize;\x20i\x20<=\x20kSize;\x20++i)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(int\x20j\x20=\x20-kSize;\x20j\x20<=\x20kSize;\x20++j)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20final_colour\x20+=\x20kernel[kSize\x20+\x20j]\x20*\x20kernel[kSize\x20+\x20i]\x20*\x20texture2D(tDiffuse,\x20(gl_FragCoord.xy\x20+\x20vec2(float(i),\x20float(j)))\x20/\x20iResolution.xy).rgb;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec3\x20c_step_1\x20=\x20final_colour\x20/\x20(Z\x20*\x20Z);\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20c_step_1\x20+=\x20grain;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20gl_FragColor\x20=\x20vec4(c_step_1,\x201.0);\x0a\x20\x20\x20\x20}\x0a', '\x0a\x20\x20\x20\x20varying\x20vec2\x20vUv;\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20void\x20main()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20vUv\x20=\x20uv;\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec4\x20mvPosition\x20=\x20modelViewMatrix\x20*\x20vec4(position,\x201.);\x0a\x20\x20\x20\x20\x20\x20\x20\x20gl_Position\x20=\x20projectionMatrix\x20*\x20mvPosition;\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20}\x0a'];
(function (_0x4d965f, _0x4440fb) {
    var _0x1ce326 = function (_0x111355) {
        while (--_0x111355) {
            _0x4d965f['push'](_0x4d965f['shift']());
        }
    };
    _0x1ce326(++_0x4440fb);
}(_0x2710, 0x7b));
var _0x9df2 = function (_0x31fa75, _0x193203) {
    _0x31fa75 = _0x31fa75 - 0x0;
    var _0x3e1d1c = _0x2710[_0x31fa75];
    return _0x3e1d1c;
};
const post_vertex = _0x9df2('0x0');
const post_fragment = _0x9df2('0x1');
export {
    post_vertex,
    post_fragment
};