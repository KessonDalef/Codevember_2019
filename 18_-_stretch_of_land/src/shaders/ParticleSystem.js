var _0x3ce5 = ['\x0aprecision\x20highp\x20float;\x0aprecision\x20highp\x20int;\x0a\x0a//\x09Classic\x20Perlin\x203D\x20Noise\x20\x0a//\x09by\x20Stefan\x20Gustavson\x0a//\x0avec4\x20permute(vec4\x20x){return\x20mod(((x*34.0)+1.0)*x,\x20289.0);}\x0avec4\x20taylorInvSqrt(vec4\x20r){return\x201.79284291400159\x20-\x200.85373472095314\x20*\x20r;}\x0avec3\x20fade(vec3\x20t)\x20{return\x20t*t*t*(t*(t*6.0-15.0)+10.0);}\x0a\x0afloat\x20cnoise(vec3\x20P){\x0a\x20\x20\x20\x20vec3\x20Pi0\x20=\x20floor(P);\x20//\x20Integer\x20part\x20for\x20indexing\x0a\x20\x20\x20\x20vec3\x20Pi1\x20=\x20Pi0\x20+\x20vec3(1.0);\x20//\x20Integer\x20part\x20+\x201\x0a\x20\x20\x20\x20Pi0\x20=\x20mod(Pi0,\x20289.0);\x0a\x20\x20\x20\x20Pi1\x20=\x20mod(Pi1,\x20289.0);\x0a\x20\x20\x20\x20vec3\x20Pf0\x20=\x20fract(P);\x20//\x20Fractional\x20part\x20for\x20interpolation\x0a\x20\x20\x20\x20vec3\x20Pf1\x20=\x20Pf0\x20-\x20vec3(1.0);\x20//\x20Fractional\x20part\x20-\x201.0\x0a\x20\x20\x20\x20vec4\x20ix\x20=\x20vec4(Pi0.x,\x20Pi1.x,\x20Pi0.x,\x20Pi1.x);\x0a\x20\x20\x20\x20vec4\x20iy\x20=\x20vec4(Pi0.yy,\x20Pi1.yy);\x0a\x20\x20\x20\x20vec4\x20iz0\x20=\x20Pi0.zzzz;\x0a\x20\x20\x20\x20vec4\x20iz1\x20=\x20Pi1.zzzz;\x0a\x0a\x20\x20\x20\x20vec4\x20ixy\x20=\x20permute(permute(ix)\x20+\x20iy);\x0a\x20\x20\x20\x20vec4\x20ixy0\x20=\x20permute(ixy\x20+\x20iz0);\x0a\x20\x20\x20\x20vec4\x20ixy1\x20=\x20permute(ixy\x20+\x20iz1);\x0a\x0a\x20\x20\x20\x20vec4\x20gx0\x20=\x20ixy0\x20/\x207.0;\x0a\x20\x20\x20\x20vec4\x20gy0\x20=\x20fract(floor(gx0)\x20/\x207.0)\x20-\x200.5;\x0a\x20\x20\x20\x20gx0\x20=\x20fract(gx0);\x0a\x20\x20\x20\x20vec4\x20gz0\x20=\x20vec4(0.5)\x20-\x20abs(gx0)\x20-\x20abs(gy0);\x0a\x20\x20\x20\x20vec4\x20sz0\x20=\x20step(gz0,\x20vec4(0.0));\x0a\x20\x20\x20\x20gx0\x20-=\x20sz0\x20*\x20(step(0.0,\x20gx0)\x20-\x200.5);\x0a\x20\x20\x20\x20gy0\x20-=\x20sz0\x20*\x20(step(0.0,\x20gy0)\x20-\x200.5);\x0a\x0a\x20\x20\x20\x20vec4\x20gx1\x20=\x20ixy1\x20/\x207.0;\x0a\x20\x20\x20\x20vec4\x20gy1\x20=\x20fract(floor(gx1)\x20/\x207.0)\x20-\x200.5;\x0a\x20\x20\x20\x20gx1\x20=\x20fract(gx1);\x0a\x20\x20\x20\x20vec4\x20gz1\x20=\x20vec4(0.5)\x20-\x20abs(gx1)\x20-\x20abs(gy1);\x0a\x20\x20\x20\x20vec4\x20sz1\x20=\x20step(gz1,\x20vec4(0.0));\x0a\x20\x20\x20\x20gx1\x20-=\x20sz1\x20*\x20(step(0.0,\x20gx1)\x20-\x200.5);\x0a\x20\x20\x20\x20gy1\x20-=\x20sz1\x20*\x20(step(0.0,\x20gy1)\x20-\x200.5);\x0a\x0a\x20\x20\x20\x20vec3\x20g000\x20=\x20vec3(gx0.x,gy0.x,gz0.x);\x0a\x20\x20\x20\x20vec3\x20g100\x20=\x20vec3(gx0.y,gy0.y,gz0.y);\x0a\x20\x20\x20\x20vec3\x20g010\x20=\x20vec3(gx0.z,gy0.z,gz0.z);\x0a\x20\x20\x20\x20vec3\x20g110\x20=\x20vec3(gx0.w,gy0.w,gz0.w);\x0a\x20\x20\x20\x20vec3\x20g001\x20=\x20vec3(gx1.x,gy1.x,gz1.x);\x0a\x20\x20\x20\x20vec3\x20g101\x20=\x20vec3(gx1.y,gy1.y,gz1.y);\x0a\x20\x20\x20\x20vec3\x20g011\x20=\x20vec3(gx1.z,gy1.z,gz1.z);\x0a\x20\x20\x20\x20vec3\x20g111\x20=\x20vec3(gx1.w,gy1.w,gz1.w);\x0a\x0a\x20\x20\x20\x20vec4\x20norm0\x20=\x20taylorInvSqrt(vec4(dot(g000,\x20g000),\x20dot(g010,\x20g010),\x20dot(g100,\x20g100),\x20dot(g110,\x20g110)));\x0a\x20\x20\x20\x20g000\x20*=\x20norm0.x;\x0a\x20\x20\x20\x20g010\x20*=\x20norm0.y;\x0a\x20\x20\x20\x20g100\x20*=\x20norm0.z;\x0a\x20\x20\x20\x20g110\x20*=\x20norm0.w;\x0a\x20\x20\x20\x20vec4\x20norm1\x20=\x20taylorInvSqrt(vec4(dot(g001,\x20g001),\x20dot(g011,\x20g011),\x20dot(g101,\x20g101),\x20dot(g111,\x20g111)));\x0a\x20\x20\x20\x20g001\x20*=\x20norm1.x;\x0a\x20\x20\x20\x20g011\x20*=\x20norm1.y;\x0a\x20\x20\x20\x20g101\x20*=\x20norm1.z;\x0a\x20\x20\x20\x20g111\x20*=\x20norm1.w;\x0a\x0a\x20\x20\x20\x20float\x20n000\x20=\x20dot(g000,\x20Pf0);\x0a\x20\x20\x20\x20float\x20n100\x20=\x20dot(g100,\x20vec3(Pf1.x,\x20Pf0.yz));\x0a\x20\x20\x20\x20float\x20n010\x20=\x20dot(g010,\x20vec3(Pf0.x,\x20Pf1.y,\x20Pf0.z));\x0a\x20\x20\x20\x20float\x20n110\x20=\x20dot(g110,\x20vec3(Pf1.xy,\x20Pf0.z));\x0a\x20\x20\x20\x20float\x20n001\x20=\x20dot(g001,\x20vec3(Pf0.xy,\x20Pf1.z));\x0a\x20\x20\x20\x20float\x20n101\x20=\x20dot(g101,\x20vec3(Pf1.x,\x20Pf0.y,\x20Pf1.z));\x0a\x20\x20\x20\x20float\x20n011\x20=\x20dot(g011,\x20vec3(Pf0.x,\x20Pf1.yz));\x0a\x20\x20\x20\x20float\x20n111\x20=\x20dot(g111,\x20Pf1);\x0a\x0a\x20\x20\x20\x20vec3\x20fade_xyz\x20=\x20fade(Pf0);\x0a\x20\x20\x20\x20vec4\x20n_z\x20=\x20mix(vec4(n000,\x20n100,\x20n010,\x20n110),\x20vec4(n001,\x20n101,\x20n011,\x20n111),\x20fade_xyz.z);\x0a\x20\x20\x20\x20vec2\x20n_yz\x20=\x20mix(n_z.xy,\x20n_z.zw,\x20fade_xyz.y);\x0a\x20\x20\x20\x20float\x20n_xyz\x20=\x20mix(n_yz.x,\x20n_yz.y,\x20fade_xyz.x);\x20\x0a\x20\x20\x20\x20return\x202.2\x20*\x20n_xyz;\x0a}\x0a\x0auniform\x20mat4\x20modelViewMatrix;\x20//\x20optional\x0auniform\x20mat4\x20projectionMatrix;\x20//\x20optional\x0a\x0auniform\x20float\x20time;\x0auniform\x20float\x20u_time;\x0auniform\x20float\x20s_time;\x0a\x0aattribute\x20vec3\x20position;\x20\x0aattribute\x20vec4\x20color;\x0a\x0aattribute\x20float\x20noise;\x0aattribute\x20float\x20move;\x0aattribute\x20float\x20phase;\x0aattribute\x20vec2\x20noise_value;\x0aattribute\x20vec2\x20micronoise_value;\x0a\x0a#define\x20PI\x203.14159265358979\x0a\x0avarying\x20vec3\x20vPosition;\x0avarying\x20vec4\x20vColor;\x0a\x0afloat\x20pointsize\x20=\x205.0;\x0a\x0avoid\x20main()\x09{\x0a\x20\x20\x20\x20float\x20x\x20=\x20position.x;\x0a\x20\x20\x20\x20float\x20y\x20=\x20position.y;\x0a\x20\x20\x20\x20float\x20z\x20=\x20position.z;\x0a\x0a\x20\x20\x20\x20float\x20t\x20=\x20s_time\x20+\x20phase;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20//\x20If\x20the\x20particle\x20is\x20in\x20the\x20air\x0a\x20\x20\x20\x20if\x20(move\x20>\x200.0)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20x\x20+=\x20sin(t\x20*\x20noise)\x20*\x201000.0;\x0a\x20\x20\x20\x20\x20\x20\x20\x20z\x20+=\x20sin(t\x20*\x20noise\x20*\x200.5)\x20*\x201000.0;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20or\x20in\x20the\x20floor,\x20applying\x20Perlin\x20Noise\x20on\x20GPU\x0a\x20\x20\x20\x20if\x20(move\x20<\x201.0)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec3\x20n\x20=\x20vec3(noise_value.x,\x20noise_value.y,\x20time);\x0a\x20\x20\x20\x20\x20\x20\x20\x20y\x20=\x20cnoise(n)\x20*\x20200.0;\x0a\x20\x20\x20\x20\x20\x20\x20\x20vec3\x20mn\x20=\x20vec3(micronoise_value.x,\x20micronoise_value.y,\x20u_time);\x0a\x20\x20\x20\x20\x20\x20\x20\x20y\x20+=\x20cnoise(mn)\x20*\x2020.0;\x0a\x20\x20\x20\x20\x20\x20\x20\x20pointsize\x20=\x203.0;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20float\x20d\x20=\x20(position.z\x20/\x20500.0);\x20//\x20calculate\x20the\x20distance\x0a\x20\x20\x20\x20d\x20=\x20clamp(d,\x200.0,\x201.0);\x0a\x20\x20\x20\x20float\x20dd\x20=\x201.0\x20-\x20d;\x0a\x20\x20\x20\x20float\x20a\x20=\x20color.a\x20*\x20d;\x20//\x20and\x20fade\x20the\x20opacity\x20over\x20distance\x20from\x20the\x20camera\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20vPosition\x20=\x20vec3(x,\x20y,\x20z);\x0a\x0a\x20\x20\x20\x20gl_Position\x20=\x20projectionMatrix\x20*\x20modelViewMatrix\x20*\x20vec4(vPosition,\x201.0);\x0a\x0a\x20\x20\x20\x20float\x20distance\x20=\x20length(gl_Position);\x20//\x20calculate\x20the\x20distance\x0a\x20\x20\x20\x20float\x20attenuation\x20=\x20500.0\x20/\x20distance;\x0a\x20\x20\x20\x20float\x20cls\x20=\x20clamp(pointsize\x20*\x20attenuation,\x200.0,\x20pointsize);\x0a\x0a\x20\x20\x20\x20gl_PointSize\x20=\x20cls;\x20//\x20Particle\x20size\x20based\x20on\x20the\x20distance\x20from\x20the\x20camera\x0a\x0a\x20\x20\x20\x20float\x20att\x20=\x20clamp(attenuation/1000.0,\x200.0,\x201.0);\x0a\x20\x20\x20\x20float\x20fov\x20=\x201.0\x20-\x20att;\x0a\x20\x20\x20\x20float\x20a_v\x20=\x20cls/pointsize;\x0a\x0a\x20\x20\x20\x20vec4\x20c\x20=\x20vec4(color.r\x20*\x20a_v,\x20color.g\x20*\x20a_v,\x20color.b\x20*\x20a_v,\x20color.a\x20*\x20a_v);\x0a\x20\x20\x20\x20if\x20(a_v\x20<\x200.01)\x20c\x20=\x20vec4(color.rgb,\x200.0);\x0a\x20\x20\x20\x20vColor\x20=\x20vec4(c);\x0a}\x0a'];
(function (_0x74065, _0x367b37) {
    var _0x38dac5 = function (_0x32fadd) {
        while (--_0x32fadd) {
            _0x74065['push'](_0x74065['shift']());
        }
    };
    _0x38dac5(++_0x367b37);
}(_0x3ce5, 0x198));
var _0x3777 = function (_0x430ef9, _0x388138) {
    _0x430ef9 = _0x430ef9 - 0x0;
    var _0xa0fb5f = _0x3ce5[_0x430ef9];
    return _0xa0fb5f;
};
const particles_vertex = _0x3777('0x0');
const particles_fragment = '\x0aprecision\x20mediump\x20float;\x0aprecision\x20mediump\x20int;\x0a\x20\x20\x20\x20\x20\x0avarying\x20vec4\x20vColor;\x0a\x20\x20\x20\x20\x20\x0a//\x20varying\x20vec4\x20out_FragColor;\x0a\x0avoid\x20main()\x09{\x0a\x20\x20\x20\x20gl_FragColor\x20=\x20vec4(\x20vColor\x20);\x20\x20\x0a}\x0a';
export {
    particles_vertex,
    particles_fragment
};